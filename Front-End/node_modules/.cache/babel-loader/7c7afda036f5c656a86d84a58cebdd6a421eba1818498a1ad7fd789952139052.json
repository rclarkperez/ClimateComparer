{"ast":null,"code":"var t = {\n  photo: \"https://api.pexels.com/v1/\",\n  video: \"https://api.pexels.com/videos/\",\n  collections: \"https://api.pexels.com/v1/collections/\"\n};\nfunction r(r, e) {\n  var n = {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"User-Agent\": \"Pexels/JavaScript\",\n        Authorization: r\n      }\n    },\n    o = t[e];\n  return function (t, r) {\n    return fetch(\"\" + o + t + \"?\" + function (t) {\n      return Object.keys(t).map(function (r) {\n        return r + \"=\" + t[r];\n      }).join(\"&\");\n    }(r || {}), n).then(function (t) {\n      if (!t.ok) throw new Error(t.statusText);\n      return t.json();\n    });\n  };\n}\nfunction e(t) {\n  var e = r(t, \"collections\");\n  return {\n    all: function (t) {\n      return void 0 === t && (t = {}), e(\"\", t);\n    },\n    media: function (t) {\n      var r = t.id,\n        n = function (t, r) {\n          if (null == t) return {};\n          var e,\n            n,\n            o = {},\n            i = Object.keys(t);\n          for (n = 0; n < i.length; n++) r.indexOf(e = i[n]) >= 0 || (o[e] = t[e]);\n          return o;\n        }(t, [\"id\"]);\n      return e(\"\" + r, n);\n    },\n    featured: function (t) {\n      return void 0 === t && (t = {}), e(\"featured\", t);\n    }\n  };\n}\nfunction n(t) {\n  return !(!t || !t.photos);\n}\nvar o = {\n  __proto__: null,\n  isPhotos: n,\n  isVideos: function (t) {\n    return !(!t || !t.videos);\n  },\n  isError: function (t) {\n    return !!t.error;\n  }\n};\nfunction i(t) {\n  var e = r(t, \"photo\");\n  return {\n    search: function (t) {\n      return e(\"/search\", t);\n    },\n    curated: function (t) {\n      return void 0 === t && (t = {}), e(\"/curated\", t);\n    },\n    show: function (t) {\n      return e(\"/photos/\" + t.id);\n    },\n    random: function () {\n      try {\n        var t = Math.floor(1e3 * Math.random());\n        return Promise.resolve(this.curated({\n          page: t,\n          per_page: 1\n        })).then(function (t) {\n          return n(t) ? t.photos[0] : t;\n        });\n      } catch (t) {\n        return Promise.reject(t);\n      }\n    }\n  };\n}\nfunction u(t) {\n  var e = r(t, \"video\");\n  return {\n    search: function (t) {\n      return e(\"/search\", t);\n    },\n    popular: function (t) {\n      return void 0 === t && (t = {}), e(\"/popular\", t);\n    },\n    show: function (t) {\n      return e(\"/videos/\" + t.id);\n    }\n  };\n}\nfunction c(t) {\n  if (!t || \"string\" != typeof t) throw new TypeError(\"An ApiKey must be provided when initiating the Pexel's client.\");\n  return {\n    typeCheckers: o,\n    photos: i(t),\n    videos: u(t),\n    collections: e(t)\n  };\n}\nrequire(\"isomorphic-fetch\");\nexport { c as createClient };","map":{"version":3,"mappings":"IAKMA,IAA4C;EAChDC,OCN0B;EDO1BC,OCN0B;EDO1BC,aCN+B;AAAA;ADSjC,SAAwBC,EAAmBC,GAAgBC;EACzD,IAAMC,IAAU;MACdC,QAAQ;MACRC,SAAS;QACPC,QAAQ;QACRC,gBAAgB;QAChBC,cAAc;QACdC,eAAeR;MAAAA;IAAAA;IAIbS,IAAUd,EAASM;EAEzB,iBAA0BS,GAAcC;IAAAA,OACtCC,WAASH,IAAUC,UAWvB,UAA2CC;MACzC,OAAOE,OAAOC,KAAKH,GAChBI,IAAI,UAACC;QAAAA,OAAWA,UAAOL,EAAOK;MAAAA,GAC9BC,KAAK;IAAA,CAdqBC,CAAgBP,KAAU,KAAOT,GAASiB,KACnE,UAACC;MACC,KAAKA,EAASC,IACZ,UAAUC,MAAMF,EAASG;MAG3B,OAAOH,EAASI;IAAAA;EAAAA;AAAAA;AAAAA,SEPAC,EAA4BzB;EAClD,IAAM0B,IAAe3B,EAAmBC,GAAQ;EAEhD,OAAO;IACL2B,eAAIhB;MACF,kBADEA,UAA2B,KACtBe,EAAa,IAAIf;IAAAA;IAE1BiB;MAAAA,IACEC;QACGlB;UAAAA;UAAAA;YAAAA;YAAAA;YAAAA;UAAAA;UAAAA;QAAAA;MAKH,OAAOe,OAAgBG,GAAMlB;IAAAA;IAE/BmB,oBAASnB;MACP,kBADOA,UAA2B,KAC3Be,EAAa,YAAYf;IAAAA;EAAAA;AAAAA;AAAAA,SCpCtBoB,EAASC;EACvB,UAAUA,MAAKA,EAAEC;AAAAA;AAAAA;EAAAA;EAAAA;EAAAA,UAMnB,UAAyBD;IACvB,UAAUA,MAAKA,EAAEE;EAAAA;EAAAA,mBAMKF;IACtB,SAASA,EAAEG;EAAAA;AAAAA;AAAAA,SCLWC,EAAuBpC;EAC7C,IAAM0B,IAAe3B,EAAmBC,GAAQ;EAEhD,OAAO;IACLqC,kBACE1B;MAEA,OAAOe,aAAwBf;IAAAA;IAEjC2B,mBAAQ3B;MACN,kBADMA,UAA2B,KAC1Be,cAAyBf;IAAAA;IAElC4B;MACE,OAAOb,iBADFG;IAAAA;IAGDW;MAAAA;QAAAA,IACEC,IAAaC,KAAKC,MAAM,MAAOD,KAAKF;QAAAA,uBACnBI,KAAKN,QAAQ;UAAEO,MAAMJ;UAAYK,UAAU;QAAA,mBAA5D1B;UAAAA,OAEFW,EAASX,KACJA,EAASa,OAAO,KAGlBb;QAAAA;MAAAA,CApBJ;QAAA;MAAA;IAAA;EAAA;AAAA;AAAA,SCLegB,EAAuBpC;EAC7C,IAAM0B,IAAe3B,EAAmBC,GAAQ;EAEhD,OAAO;IACLqC,kBACE1B;MAKA,OAAOe,aAAwBf;IAAAA;IAEjCoC,mBACEpC;MAEA,kBAFAA,UAA+C,KAExCe,cAAyBf;IAAAA;IAElC4B;MACE,OAAOb,iBADFG;IAAAA;EAAAA;AAAAA;AAAAA,SCvBamB,EAAahD;EACnC,KAAKA,KAA4B,mBAAXA,GACpB,UAAUiD;EAKZ,OAAO;IACLC;IACAjB,QAAQG,EAAuBpC;IAC/BkC,QAAQiB,EAAuBnD;IAC/BF,aAAa2B,EAA4BzB;EAAAA;AAAAA;AAlB7CoD,QAAQ;AAAA","names":["baseUrls","photo","video","collections","createFetchWrapper","apiKey","type","options","method","headers","Accept","Content-Type","User-Agent","Authorization","baseUrl","path","params","fetch","Object","keys","map","key","join","stringifyParams","then","response","ok","Error","statusText","json","generateCollectionEndpoints","fetchWrapper","all","media","id","featured","isPhotos","x","photos","videos","error","generatePhotoEndpoints","search","curated","show","random","randomPage","Math","floor","this","page","per_page","popular","createClient","TypeError","typeCheckers","generateVideoEndpoints","require"],"sources":["/Users/ryanclark/Desktop/climatecomparer/Front-End/node_modules/pexels/src/createFetchWrapper.ts","/Users/ryanclark/Desktop/climatecomparer/Front-End/node_modules/pexels/src/constants.ts","/Users/ryanclark/Desktop/climatecomparer/Front-End/node_modules/pexels/src/generateCollectionEndpoints.ts","/Users/ryanclark/Desktop/climatecomparer/Front-End/node_modules/pexels/src/typeCheckers.ts","/Users/ryanclark/Desktop/climatecomparer/Front-End/node_modules/pexels/src/generatePhotoEndpoints.ts","/Users/ryanclark/Desktop/climatecomparer/Front-End/node_modules/pexels/src/generateVideoEndpoints.ts","/Users/ryanclark/Desktop/climatecomparer/Front-End/node_modules/pexels/src/createClient.ts"],"sourcesContent":["import { Params } from \"./types\";\nimport { photoBaseUrl, videoBaseUrl, collectionBaseUrl } from \"./constants\";\n\ntype AllowedTypes = \"photo\" | \"video\" | \"collections\";\n\nconst baseUrls: { [T in AllowedTypes]: string } = {\n  photo: photoBaseUrl,\n  video: videoBaseUrl,\n  collections: collectionBaseUrl,\n};\n\nexport default function createFetchWrapper(apiKey: string, type: AllowedTypes) {\n  const options = {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      \"User-Agent\": \"Pexels/JavaScript\",\n      Authorization: apiKey,\n    },\n  };\n\n  const baseUrl = baseUrls[type];\n\n  return <T extends Params>(path: string, params?: T) =>\n    fetch(`${baseUrl}${path}?${stringifyParams(params || {})}`, options).then(\n      (response) => {\n        if (!response.ok) {\n          throw new Error(response.statusText);\n        }\n\n        return response.json();\n      }\n    );\n}\n\nfunction stringifyParams<T extends Params>(params: T) {\n  return Object.keys(params)\n    .map((key) => `${key}=${params[key]}`)\n    .join(\"&\");\n}\n","export const photoBaseUrl = \"https://api.pexels.com/v1/\";\nexport const videoBaseUrl = \"https://api.pexels.com/videos/\";\nexport const collectionBaseUrl = \"https://api.pexels.com/v1/collections/\";\n","import createFetchWrapper from \"./createFetchWrapper\";\nimport { Collection, PaginationParams, ErrorResponse, Medium } from \"./types\";\n\ntype AllReturn =\n  | {\n      page: number;\n      per_page: number;\n      collections: Collection[];\n    }\n  | ErrorResponse;\n\ntype MediaReturn =\n  | {\n      page: number;\n      per_page: number;\n      total_results: number;\n      media: (Medium & { type: \"Video\" | \"Photo\" })[];\n    }\n  | ErrorResponse;\n\ntype FeaturedReturn =\n  | { page: number; per_page: number; collections: Collection[] }\n  | ErrorResponse;\n\nexport default function generateCollectionEndpoints(apiKey: string) {\n  const fetchWrapper = createFetchWrapper(apiKey, \"collections\");\n\n  return {\n    all(params: PaginationParams = {}): Promise<AllReturn> {\n      return fetchWrapper(\"\", params);\n    },\n    media({\n      id,\n      ...params\n    }: PaginationParams & {\n      id: string | number;\n      type?: \"photos\" | \"videos\";\n    }): Promise<MediaReturn> {\n      return fetchWrapper(`${id}`, params);\n    },\n    featured(params: PaginationParams = {}): Promise<FeaturedReturn> {\n      return fetchWrapper(\"featured\", params);\n    },\n  };\n}\n","import { Photos, Videos, ErrorResponse } from \"./types\";\n\n/**\n * A helper function to determine if the object is a valid Photo response\n */\nexport function isPhotos(x: any): x is Photos {\n  return !!(x && x.photos);\n}\n\n/**\n * A helper function to determine if the object is a valid Video response\n */\nexport function isVideos(x: any): x is Videos {\n  return !!(x && x.videos);\n}\n\n/**\n * A helper function to determine if the object was an error response\n */\nexport function isError(x: any): x is ErrorResponse {\n  return !!x.error;\n}\n","import createFetchWrapper from \"./createFetchWrapper\";\nimport {\n  Photo,\n  PaginationParams,\n  ErrorResponse,\n  Photos,\n  PhotosWithTotalResults,\n} from \"./types\";\nimport { isPhotos } from \"./typeCheckers\";\n\ntype SearchReturn = PhotosWithTotalResults | ErrorResponse;\ntype CuratedReturn = Photos | ErrorResponse;\ntype ShowReturn = Photo | ErrorResponse;\ntype RandomReturn = Photo | ErrorResponse;\n\nexport default function generatePhotoEndpoints(apiKey: string) {\n  const fetchWrapper = createFetchWrapper(apiKey, \"photo\");\n\n  return {\n    search(\n      params: PaginationParams & { query: string }\n    ): Promise<SearchReturn> {\n      return fetchWrapper(`/search`, params);\n    },\n    curated(params: PaginationParams = {}): Promise<CuratedReturn> {\n      return fetchWrapper(`/curated`, params);\n    },\n    show({ id }: { id: string | number }): Promise<ShowReturn> {\n      return fetchWrapper(`/photos/${id}`);\n    },\n    async random(): Promise<RandomReturn> {\n      const randomPage = Math.floor(1000 * Math.random());\n      const response = await this.curated({ page: randomPage, per_page: 1 });\n\n      if (isPhotos(response)) {\n        return response.photos[0] as RandomReturn;\n      }\n\n      return response as ErrorResponse;\n    },\n  };\n}\n","import createFetchWrapper from \"./createFetchWrapper\";\nimport {\n  PaginationParams,\n  ErrorResponse,\n  Video,\n  Videos,\n  VideoFilterParams,\n} from \"./types\";\n\ntype SearchReturn = Videos | ErrorResponse;\ntype PopularReturn = Videos | ErrorResponse;\ntype ShowReturn = Video;\n\nexport default function generatePhotoEndpoints(apiKey: string) {\n  const fetchWrapper = createFetchWrapper(apiKey, \"video\");\n\n  return {\n    search(\n      params: PaginationParams &\n        VideoFilterParams & {\n          query: string;\n        }\n    ): Promise<SearchReturn> {\n      return fetchWrapper(`/search`, params);\n    },\n    popular(\n      params: PaginationParams & VideoFilterParams = {}\n    ): Promise<PopularReturn> {\n      return fetchWrapper(`/popular`, params);\n    },\n    show({ id }: { id: string | number }): Promise<ShowReturn> {\n      return fetchWrapper(`/videos/${id}`);\n    },\n  };\n}\n","require(\"isomorphic-fetch\");\n\nimport generateCollectionEndpoints from \"./generateCollectionEndpoints\";\nimport generatePhotoEndpoints from \"./generatePhotoEndpoints\";\nimport generateVideoEndpoints from \"./generateVideoEndpoints\";\nimport * as typeCheckers from \"./typeCheckers\";\n\nexport default function createClient(apiKey: string) {\n  if (!apiKey || typeof apiKey !== \"string\") {\n    throw new TypeError(\n      `An ApiKey must be provided when initiating the Pexel's client.`\n    );\n  }\n\n  return {\n    typeCheckers,\n    photos: generatePhotoEndpoints(apiKey),\n    videos: generateVideoEndpoints(apiKey),\n    collections: generateCollectionEndpoints(apiKey),\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}