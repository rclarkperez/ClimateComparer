{"ast":null,"code":"async function sendData() {\n  const data = {\n    city: city,\n    state: state\n  };\n  const response = await fetch(\"http://localhost:3002/weather\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  });\n  const result = await response.json();\n\n  // Clear any existing table\n  const resultDiv = document.getElementById(\"result\");\n  while (resultDiv.firstChild) {\n    resultDiv.removeChild(resultDiv.firstChild);\n  }\n\n  // Create a new table element\n  const table = document.createElement(\"table\");\n  resultDiv.appendChild(table);\n\n  // Create the header row\n  const headerRow = document.createElement(\"tr\");\n  table.appendChild(headerRow);\n  const keys = Object.keys(result);\n  const monthNames = Object.keys(result[keys[0]]);\n  monthNames.unshift(\"\"); // Add an empty cell for the first column\n  monthNames.forEach(monthName => {\n    const headerCell = document.createElement(\"th\");\n    headerCell.textContent = monthName;\n    headerRow.appendChild(headerCell);\n  });\n\n  // Create the data rows\n  keys.forEach(key => {\n    const dataRow = document.createElement(\"tr\");\n    table.appendChild(dataRow);\n    const rowData = result[key];\n    const dataValues = Object.values(rowData);\n    dataValues.unshift(key); // Add the month name to the first column\n    dataValues.forEach(dataValue => {\n      const dataCell = document.createElement(\"td\");\n      dataCell.textContent = dataValue;\n      dataRow.appendChild(dataCell);\n    });\n  });\n}\nexport default sendData;","map":{"version":3,"names":["sendData","data","city","state","response","fetch","method","headers","body","JSON","stringify","result","json","resultDiv","document","getElementById","firstChild","removeChild","table","createElement","appendChild","headerRow","keys","Object","monthNames","unshift","forEach","monthName","headerCell","textContent","key","dataRow","rowData","dataValues","values","dataValue","dataCell"],"sources":["/Users/ryanclark/Desktop/climatecomparer/src/components/send.js"],"sourcesContent":["async function sendData() {\n\n    const data = {\n        city: city,\n        state: state\n    };\n\n    const response = await fetch(\"http://localhost:3002/weather\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n    });\n\n    const result = await response.json();\n\n    // Clear any existing table\n    const resultDiv = document.getElementById(\"result\");\n    while (resultDiv.firstChild) {\n        resultDiv.removeChild(resultDiv.firstChild);\n    }\n\n    // Create a new table element\n    const table = document.createElement(\"table\");\n    resultDiv.appendChild(table);\n\n    // Create the header row\n    const headerRow = document.createElement(\"tr\");\n    table.appendChild(headerRow);\n    const keys = Object.keys(result);\n    const monthNames = Object.keys(result[keys[0]]);\n    monthNames.unshift(\"\"); // Add an empty cell for the first column\n    monthNames.forEach(monthName => {\n        const headerCell = document.createElement(\"th\");\n        headerCell.textContent = monthName;\n        headerRow.appendChild(headerCell);\n    });\n\n    // Create the data rows\n    keys.forEach(key => {\n        const dataRow = document.createElement(\"tr\");\n        table.appendChild(dataRow);\n        const rowData = result[key];\n        const dataValues = Object.values(rowData);\n        dataValues.unshift(key); // Add the month name to the first column\n        dataValues.forEach(dataValue => {\n            const dataCell = document.createElement(\"td\");\n            dataCell.textContent = dataValue;\n            dataRow.appendChild(dataCell);\n        });\n    });\n}\n\nexport default sendData;"],"mappings":"AAAA,eAAeA,QAAQ,GAAG;EAEtB,MAAMC,IAAI,GAAG;IACTC,IAAI,EAAEA,IAAI;IACVC,KAAK,EAAEA;EACX,CAAC;EAED,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;IAC1DC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,IAAI;EAC7B,CAAC,CAAC;EAEF,MAAMU,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,EAAE;;EAEpC;EACA,MAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC;EACnD,OAAOF,SAAS,CAACG,UAAU,EAAE;IACzBH,SAAS,CAACI,WAAW,CAACJ,SAAS,CAACG,UAAU,CAAC;EAC/C;;EAEA;EACA,MAAME,KAAK,GAAGJ,QAAQ,CAACK,aAAa,CAAC,OAAO,CAAC;EAC7CN,SAAS,CAACO,WAAW,CAACF,KAAK,CAAC;;EAE5B;EACA,MAAMG,SAAS,GAAGP,QAAQ,CAACK,aAAa,CAAC,IAAI,CAAC;EAC9CD,KAAK,CAACE,WAAW,CAACC,SAAS,CAAC;EAC5B,MAAMC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACX,MAAM,CAAC;EAChC,MAAMa,UAAU,GAAGD,MAAM,CAACD,IAAI,CAACX,MAAM,CAACW,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAC/CE,UAAU,CAACC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;EACxBD,UAAU,CAACE,OAAO,CAACC,SAAS,IAAI;IAC5B,MAAMC,UAAU,GAAGd,QAAQ,CAACK,aAAa,CAAC,IAAI,CAAC;IAC/CS,UAAU,CAACC,WAAW,GAAGF,SAAS;IAClCN,SAAS,CAACD,WAAW,CAACQ,UAAU,CAAC;EACrC,CAAC,CAAC;;EAEF;EACAN,IAAI,CAACI,OAAO,CAACI,GAAG,IAAI;IAChB,MAAMC,OAAO,GAAGjB,QAAQ,CAACK,aAAa,CAAC,IAAI,CAAC;IAC5CD,KAAK,CAACE,WAAW,CAACW,OAAO,CAAC;IAC1B,MAAMC,OAAO,GAAGrB,MAAM,CAACmB,GAAG,CAAC;IAC3B,MAAMG,UAAU,GAAGV,MAAM,CAACW,MAAM,CAACF,OAAO,CAAC;IACzCC,UAAU,CAACR,OAAO,CAACK,GAAG,CAAC,CAAC,CAAC;IACzBG,UAAU,CAACP,OAAO,CAACS,SAAS,IAAI;MAC5B,MAAMC,QAAQ,GAAGtB,QAAQ,CAACK,aAAa,CAAC,IAAI,CAAC;MAC7CiB,QAAQ,CAACP,WAAW,GAAGM,SAAS;MAChCJ,OAAO,CAACX,WAAW,CAACgB,QAAQ,CAAC;IACjC,CAAC,CAAC;EACN,CAAC,CAAC;AACN;AAEA,eAAepC,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}