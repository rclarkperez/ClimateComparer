{"ast":null,"code":"var _jsxFileName = \"/Users/ryanclark/Desktop/climatecomparer/Front-End/src/pages/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport { firestore } from '../components/Firebase';\nimport { collection, addDoc, getDocs, query, where, onSnapshot } from \"firebase/firestore\";\nimport { statesUSA } from \"../constants/statesUSA\";\nimport axios from \"axios\";\n// import Map from \"../components/Map\";\nimport { createClient } from 'pexels';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [climate, setClimate] = useState([]); //list taken from firebase DB\n  const [currentCity, setcurrentCity] = useState('');\n  const [currentState, setcurrentState] = useState('');\n  const [currentCityClimateTD, setcurrentCityClimate] = useState([]);\n  const [currentCityClimateTR, setcurrentCityValues] = useState([]);\n  const [koppenClimate, setkoppenClimate] = useState('');\n  const [cityPhotoURL, setcityPhotoURL] = useState('');\n\n  // const [WinterHigh, setWinterHigh] = useState([])\n  // const [WinterLow, setWinterLow] = useState([])\n\n  // const [springHigh, setSpringHigh] = useState([])\n  // const [springLow, setSpringLow] = useState([])\n\n  // const [SummerHigh, setSummerHigh] = useState([])\n  // const [SummerLow, setSummerLow] = useState([])\n\n  // const [FallHigh, setFallHigh] = useState([])\n  // const [FallLow, setFallrLow] = useState([])\n\n  const change = async event => {\n    setcurrentCity(event.target.value);\n    DisplayData();\n  };\n\n  //get all climates from firebase db\n  const FetchClimates = async () => {\n    await getDocs(collection(firestore, \"cityClimate\")).then(querySnapshot => {\n      const newData = querySnapshot.docs.map(doc => ({\n        ...doc.data(),\n        id: doc.id\n      }));\n      setClimate(newData);\n      // console.log(\"new data: \", newData)\n    });\n  };\n\n  const DisplayData = async () => {\n    for (let i = 0; i <= climate.length - 1; i++) {\n      //if value is found, iterate though object and create a table \n      if (climate[i].city == currentCity) {\n        // console.log('success!', climate[i].result)\n        setcurrentState(climate[i].state);\n        for (const [key, value] of Object.entries(climate[i].result)) {\n          console.log('key:', key, 'value:', value);\n          for (const [somekey, somevalue] of Object.entries(value)) {\n            console.log(\"table data: \", somekey, somevalue);\n          }\n          // if (key == 'Average high °F (°C)'){\n          //     console.log('test', value.Jan)\n          //     // setWinterHigh()\n          //     // setSpringHigh()\n          //     // setSummerHigh()\n          //     // setFallHigh()\n          // }\n\n          currentCityClimateTD.push(key);\n          currentCityClimateTR.push(value);\n        }\n      } else {\n        // console.log('failure')\n      }\n    }\n  };\n  const getKoppenClimate = async () => {\n    //grab lat and lon\n    let city = currentCity;\n    let state = '';\n    let country = currentState;\n    if (currentCity == '') {\n      return;\n    }\n    if (statesUSA.includes(currentState)) {\n      state = currentState;\n      country = 'us';\n    }\n\n    // console.log(currentCity, currentState)\n\n    const baseURL1 = `https://api.openweathermap.org/geo/1.0/direct?q=${city},${state},${country}&limit=2&appid=3dd6b4b0643fe807a69521e6f5cd399a`;\n    await axios.get(baseURL1).then(async response => {\n      // console.log(response)\n      const lat = response.data[0].lat;\n      const lon = response.data[0].lon;\n      const first_res = response;\n      // console.log('lat: ', lat,'lon: ', lon)\n\n      // get koppen climate type\n      const baseURL2 = `http://climateapi.scottpinkelman.com/api/v1/location/${lat}/${lon}`;\n      axios.get(baseURL2).then(async response => {\n        // console.log(\"2nd response\", response)\n        const koppen = response.data.return_values[0].zone_description;\n        setkoppenClimate(koppen);\n        // console.log(koppen)\n      });\n    });\n  };\n\n  const cityImage = async () => {\n    const pexelClient = createClient('Q5168KkkeznackGWl9pB9HhJbQmnPBnow24iTNaBjX1cPXA945RiDhNq');\n    const query = `${currentCity + ',  ' + currentState}`;\n    pexelClient.photos.search({\n      query,\n      per_page: 1\n    }).then(photos => {\n      const PhotoURL = photos.photos[0].src.original;\n      setcityPhotoURL(PhotoURL);\n    });\n  };\n\n  //UI for Microservice to fetch city Climate data constructed by partner in JS *********** \n  async function sendData() {\n    const data = {\n      city: currentCity,\n      state: currentState\n    };\n    const response = await fetch(\"http://localhost:3001/weather\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    const result = await response.json();\n\n    // Clear any existing table\n    const resultDiv = document.getElementById(\"result\");\n    while (resultDiv.firstChild) {\n      resultDiv.removeChild(resultDiv.firstChild);\n    }\n\n    // Create a new table element\n    const table = document.createElement(\"table\");\n    resultDiv.appendChild(table);\n\n    // Create the header row\n    const headerRow = document.createElement(\"tr\");\n    table.appendChild(headerRow);\n    const keys = Object.keys(result);\n    const monthNames = Object.keys(result[keys[0]]);\n    monthNames.unshift(\"\"); // Add an empty cell for the first column\n    monthNames.forEach(monthName => {\n      const headerCell = document.createElement(\"th\");\n      headerCell.textContent = monthName;\n      headerRow.appendChild(headerCell);\n    });\n\n    // Create the data rows\n    keys.forEach(key => {\n      const dataRow = document.createElement(\"tr\");\n      table.appendChild(dataRow);\n      const rowData = result[key];\n      const dataValues = Object.values(rowData);\n      dataValues.unshift(key); // Add the month name to the first column\n      dataValues.forEach(dataValue => {\n        const dataCell = document.createElement(\"td\");\n        dataCell.textContent = dataValue;\n        dataRow.appendChild(dataCell);\n      });\n    });\n  }\n\n  // Start the fetch operation as soon as\n  // the page loads\n  useEffect(() => {\n    FetchClimates();\n    DisplayData();\n    getKoppenClimate();\n    cityImage();\n    sendData();\n  }, [currentCity, currentCityClimateTD, currentCityClimateTR, currentState, koppenClimate, cityPhotoURL]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"about\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"About\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Random Latin filler words...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"get-started\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Get Started!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Random Latin filler words....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column\",\n        id: \"left-column\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"****Map Goes Here****\", /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"map\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Select a city and country and get started!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: event => setcurrentCity(event.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"City\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 9\n        }, this), climate.map(obj => /*#__PURE__*/_jsxDEV(\"option\", {\n          className: \"item\",\n          children: obj.city\n        }, obj.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"See Climate Data Here:\", /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"City: \", currentCity + ',  ' + currentState, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Climate Type: \", koppenClimate]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            style: currentCity == '' ? {} : {\n              objectFit: 'cover',\n              width: '100vh',\n              height: '60vh'\n            },\n            src: cityPhotoURL\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"result\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n_s(Home, \"fhv19TmVCJheC4VTZXqE2HPtLLo=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","useHistory","firestore","collection","addDoc","getDocs","query","where","onSnapshot","statesUSA","axios","createClient","Home","climate","setClimate","currentCity","setcurrentCity","currentState","setcurrentState","currentCityClimateTD","setcurrentCityClimate","currentCityClimateTR","setcurrentCityValues","koppenClimate","setkoppenClimate","cityPhotoURL","setcityPhotoURL","change","event","target","value","DisplayData","FetchClimates","then","querySnapshot","newData","docs","map","doc","data","id","i","length","city","state","key","Object","entries","result","console","log","somekey","somevalue","push","getKoppenClimate","country","includes","baseURL1","get","response","lat","lon","first_res","baseURL2","koppen","return_values","zone_description","cityImage","pexelClient","photos","search","per_page","PhotoURL","src","original","sendData","fetch","method","headers","body","JSON","stringify","json","resultDiv","document","getElementById","firstChild","removeChild","table","createElement","appendChild","headerRow","keys","monthNames","unshift","forEach","monthName","headerCell","textContent","dataRow","rowData","dataValues","values","dataValue","dataCell","obj","objectFit","width","height"],"sources":["/Users/ryanclark/Desktop/climatecomparer/Front-End/src/pages/Home.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { useHistory } from 'react-router-dom';\nimport { firestore } from '../components/Firebase';\nimport { collection, addDoc, getDocs, query, where, onSnapshot } from \"firebase/firestore\";\nimport { statesUSA } from \"../constants/statesUSA\";\nimport axios from \"axios\";\n// import Map from \"../components/Map\";\nimport { createClient } from 'pexels';\n\n\n\nconst Home = () => {\n    const [climate, setClimate] = useState([]) //list taken from firebase DB\n    const [currentCity, setcurrentCity] = useState('')\n    const [currentState, setcurrentState] = useState('')\n    const [currentCityClimateTD, setcurrentCityClimate] = useState([])\n    const [currentCityClimateTR, setcurrentCityValues] = useState([])\n    const [koppenClimate, setkoppenClimate] = useState('')\n    const [cityPhotoURL, setcityPhotoURL] = useState('')\n\n\n    // const [WinterHigh, setWinterHigh] = useState([])\n    // const [WinterLow, setWinterLow] = useState([])\n\n    // const [springHigh, setSpringHigh] = useState([])\n    // const [springLow, setSpringLow] = useState([])\n\n    // const [SummerHigh, setSummerHigh] = useState([])\n    // const [SummerLow, setSummerLow] = useState([])\n\n    // const [FallHigh, setFallHigh] = useState([])\n    // const [FallLow, setFallrLow] = useState([])\n\n\n\n\n\n    const change = async (event) => {\n        setcurrentCity(event.target.value)\n        DisplayData()\n\n    }\n\n    //get all climates from firebase db\n      const FetchClimates = async () => {\n        await getDocs(collection(firestore, \"cityClimate\"))\n            .then((querySnapshot) => {\n                const newData = querySnapshot.docs \n                    .map((doc) => ({...doc.data(), id: doc.id}));\n                setClimate(newData)\n                // console.log(\"new data: \", newData)\n\n            })\n    }\n\n    const DisplayData =  async() => {\n        for (let i =0; i<=climate.length-1; i++){\n            //if value is found, iterate though object and create a table \n            if(climate[i].city == currentCity){\n                // console.log('success!', climate[i].result)\n                setcurrentState(climate[i].state)\n                for (const [key, value] of Object.entries(climate[i].result)) {\n                    console.log('key:', key, 'value:', value);\n                    for (const [somekey, somevalue] of Object.entries(value)) {\n                        console.log(\"table data: \", somekey, somevalue)\n                    }\n                    // if (key == 'Average high °F (°C)'){\n                    //     console.log('test', value.Jan)\n                    //     // setWinterHigh()\n                    //     // setSpringHigh()\n                    //     // setSummerHigh()\n                    //     // setFallHigh()\n                    // }\n\n\n                    currentCityClimateTD.push(key)\n                    currentCityClimateTR.push(value)\n                }\n            }\n            else{\n                // console.log('failure')\n            }\n            }\n    }\n\n    const getKoppenClimate = async () => {\n        //grab lat and lon\n            let city = currentCity\n            let state = ''\n            let country = currentState\n\n            if (currentCity == ''){\n                return\n            }\n            if (statesUSA.includes(currentState)){\n                state = currentState\n                country = 'us'\n            }\n\n            // console.log(currentCity, currentState)\n\n            const baseURL1 = `https://api.openweathermap.org/geo/1.0/direct?q=${city},${state},${country}&limit=2&appid=3dd6b4b0643fe807a69521e6f5cd399a`\n            \n            await axios.get(baseURL1).then(async(response)=> {\n                // console.log(response)\n                const lat =  response.data[0].lat\n                const lon = response.data[0].lon\n                const first_res = response\n                // console.log('lat: ', lat,'lon: ', lon)\n\n\n            // get koppen climate type\n            const baseURL2 = `http://climateapi.scottpinkelman.com/api/v1/location/${lat}/${lon}`\n            axios.get(baseURL2).then(async(response)=> {\n                // console.log(\"2nd response\", response)\n                const koppen = response.data.return_values[0].zone_description\n                setkoppenClimate(koppen)\n                // console.log(koppen)\n                });\n\n            })\n    }\n    \n    const cityImage = async () => {\n        const pexelClient = createClient('Q5168KkkeznackGWl9pB9HhJbQmnPBnow24iTNaBjX1cPXA945RiDhNq');\n        const query = `${currentCity + ',  '+ currentState}`;\n\n        pexelClient.photos.search({ query, per_page: 1 }).then(photos => {\n            const PhotoURL = photos.photos[0].src.original\n            setcityPhotoURL(PhotoURL)\n        });\n\n    }\n\n        //UI for Microservice to fetch city Climate data constructed by partner in JS *********** \n        async function sendData() {\n        \n            const data = {\n                city: currentCity,\n                state: currentState\n            };\n           \n            const response = await fetch(\"http://localhost:3001/weather\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(data)\n            });\n           \n    \n            const result = await response.json();\n    \n            // Clear any existing table\n            const resultDiv = document.getElementById(\"result\");\n            while (resultDiv.firstChild) {\n                resultDiv.removeChild(resultDiv.firstChild);\n            }\n    \n            // Create a new table element\n            const table = document.createElement(\"table\");\n            resultDiv.appendChild(table);\n    \n            // Create the header row\n            const headerRow = document.createElement(\"tr\");\n            table.appendChild(headerRow);\n            const keys = Object.keys(result);\n            const monthNames = Object.keys(result[keys[0]]);\n            monthNames.unshift(\"\"); // Add an empty cell for the first column\n            monthNames.forEach(monthName => {\n                const headerCell = document.createElement(\"th\");\n                headerCell.textContent = monthName;\n                headerRow.appendChild(headerCell);\n            });\n    \n            // Create the data rows\n            keys.forEach(key => {\n                const dataRow = document.createElement(\"tr\");\n                table.appendChild(dataRow);\n                const rowData = result[key];\n                const dataValues = Object.values(rowData);\n                dataValues.unshift(key); // Add the month name to the first column\n                dataValues.forEach(dataValue => {\n                    const dataCell = document.createElement(\"td\");\n                    dataCell.textContent = dataValue;\n                    dataRow.appendChild(dataCell);\n                });\n            });\n        }\n    \n      // Start the fetch operation as soon as\n    // the page loads\n    useEffect(() => {\n        FetchClimates();\n        DisplayData();\n        getKoppenClimate();\n        cityImage();\n        sendData();\n        \n        \n    }, [currentCity, currentCityClimateTD, currentCityClimateTR, currentState, koppenClimate, cityPhotoURL])\n    \n    \n    return (\n    <>\n        <section id='about'>\n        <h3>About</h3>\n        <p>Random Latin filler words...</p>\n    </section>\n\n    <section id='get-started'>\n        <h3>Get Started!</h3>\n        <p>Random Latin filler words....</p>\n\n        <div className=\"column\" id=\"left-column\">   \n            <div>\n                ****Map Goes Here****\n                <div id=\"map\" ></div>\n            </div>\n        </div>\n\n        <p>Select a city and country and get started!</p>\n\n        <select\n        onChange={((event) => setcurrentCity(event.target.value))}\n        >\n        <option>City</option>\n        {climate.map((obj) =>(\n            <option\n                className=\"item\"\n                key = {obj.id}\n                >\n                    {obj.city}\n            </option>\n        ))}\n        </select>\n        <br/>\n        <br/>\n\n\n        <div>See Climate Data Here:\n            <p>City: {currentCity + ',  '+ currentState} </p> \n            <p>Climate Type: {koppenClimate}</p> \n            <p>\n                <img style={currentCity ==''? {}: { objectFit: 'cover', width: '100vh', height: '60vh'}} src = {cityPhotoURL}></img>\n            </p>\n        </div>\n \n        <br/>\n        \n\n         <div>\n            <div id=\"result\"></div>\n        </div> \n\n        <br/>\n\n    </section>\n  </>\n);\n}\n\nexport default Home;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,SAAS,QAAQ,wBAAwB;AAClD,SAASC,UAAU,EAAEC,MAAM,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,UAAU,QAAQ,oBAAoB;AAC1F,SAASC,SAAS,QAAQ,wBAAwB;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB;AACA,SAASC,YAAY,QAAQ,QAAQ;AAAC;AAAA;AAItC,MAAMC,IAAI,GAAG,MAAM;EAAA;EACf,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC,EAAC;EAC3C,MAAM,CAACgB,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACkB,YAAY,EAAEC,eAAe,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACoB,oBAAoB,EAAEC,qBAAqB,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAClE,MAAM,CAACsB,oBAAoB,EAAEC,oBAAoB,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EACjE,MAAM,CAACwB,aAAa,EAAEC,gBAAgB,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAAC0B,YAAY,EAAEC,eAAe,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;;EAGpD;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;;EAMA,MAAM4B,MAAM,GAAG,MAAOC,KAAK,IAAK;IAC5BZ,cAAc,CAACY,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IAClCC,WAAW,EAAE;EAEjB,CAAC;;EAED;EACE,MAAMC,aAAa,GAAG,YAAY;IAChC,MAAM3B,OAAO,CAACF,UAAU,CAACD,SAAS,EAAE,aAAa,CAAC,CAAC,CAC9C+B,IAAI,CAAEC,aAAa,IAAK;MACrB,MAAMC,OAAO,GAAGD,aAAa,CAACE,IAAI,CAC7BC,GAAG,CAAEC,GAAG,KAAM;QAAC,GAAGA,GAAG,CAACC,IAAI,EAAE;QAAEC,EAAE,EAAEF,GAAG,CAACE;MAAE,CAAC,CAAC,CAAC;MAChD1B,UAAU,CAACqB,OAAO,CAAC;MACnB;IAEJ,CAAC,CAAC;EACV,CAAC;;EAED,MAAMJ,WAAW,GAAI,YAAW;IAC5B,KAAK,IAAIU,CAAC,GAAE,CAAC,EAAEA,CAAC,IAAE5B,OAAO,CAAC6B,MAAM,GAAC,CAAC,EAAED,CAAC,EAAE,EAAC;MACpC;MACA,IAAG5B,OAAO,CAAC4B,CAAC,CAAC,CAACE,IAAI,IAAI5B,WAAW,EAAC;QAC9B;QACAG,eAAe,CAACL,OAAO,CAAC4B,CAAC,CAAC,CAACG,KAAK,CAAC;QACjC,KAAK,MAAM,CAACC,GAAG,EAAEf,KAAK,CAAC,IAAIgB,MAAM,CAACC,OAAO,CAAClC,OAAO,CAAC4B,CAAC,CAAC,CAACO,MAAM,CAAC,EAAE;UAC1DC,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEL,GAAG,EAAE,QAAQ,EAAEf,KAAK,CAAC;UACzC,KAAK,MAAM,CAACqB,OAAO,EAAEC,SAAS,CAAC,IAAIN,MAAM,CAACC,OAAO,CAACjB,KAAK,CAAC,EAAE;YACtDmB,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEC,OAAO,EAAEC,SAAS,CAAC;UACnD;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAGAjC,oBAAoB,CAACkC,IAAI,CAACR,GAAG,CAAC;UAC9BxB,oBAAoB,CAACgC,IAAI,CAACvB,KAAK,CAAC;QACpC;MACJ,CAAC,MACG;QACA;MAAA;IAEJ;EACR,CAAC;EAED,MAAMwB,gBAAgB,GAAG,YAAY;IACjC;IACI,IAAIX,IAAI,GAAG5B,WAAW;IACtB,IAAI6B,KAAK,GAAG,EAAE;IACd,IAAIW,OAAO,GAAGtC,YAAY;IAE1B,IAAIF,WAAW,IAAI,EAAE,EAAC;MAClB;IACJ;IACA,IAAIN,SAAS,CAAC+C,QAAQ,CAACvC,YAAY,CAAC,EAAC;MACjC2B,KAAK,GAAG3B,YAAY;MACpBsC,OAAO,GAAG,IAAI;IAClB;;IAEA;;IAEA,MAAME,QAAQ,GAAI,mDAAkDd,IAAK,IAAGC,KAAM,IAAGW,OAAQ,iDAAgD;IAE7I,MAAM7C,KAAK,CAACgD,GAAG,CAACD,QAAQ,CAAC,CAACxB,IAAI,CAAC,MAAM0B,QAAQ,IAAI;MAC7C;MACA,MAAMC,GAAG,GAAID,QAAQ,CAACpB,IAAI,CAAC,CAAC,CAAC,CAACqB,GAAG;MACjC,MAAMC,GAAG,GAAGF,QAAQ,CAACpB,IAAI,CAAC,CAAC,CAAC,CAACsB,GAAG;MAChC,MAAMC,SAAS,GAAGH,QAAQ;MAC1B;;MAGJ;MACA,MAAMI,QAAQ,GAAI,wDAAuDH,GAAI,IAAGC,GAAI,EAAC;MACrFnD,KAAK,CAACgD,GAAG,CAACK,QAAQ,CAAC,CAAC9B,IAAI,CAAC,MAAM0B,QAAQ,IAAI;QACvC;QACA,MAAMK,MAAM,GAAGL,QAAQ,CAACpB,IAAI,CAAC0B,aAAa,CAAC,CAAC,CAAC,CAACC,gBAAgB;QAC9D1C,gBAAgB,CAACwC,MAAM,CAAC;QACxB;MACA,CAAC,CAAC;IAEN,CAAC,CAAC;EACV,CAAC;;EAED,MAAMG,SAAS,GAAG,YAAY;IAC1B,MAAMC,WAAW,GAAGzD,YAAY,CAAC,0DAA0D,CAAC;IAC5F,MAAML,KAAK,GAAI,GAAES,WAAW,GAAG,KAAK,GAAEE,YAAa,EAAC;IAEpDmD,WAAW,CAACC,MAAM,CAACC,MAAM,CAAC;MAAEhE,KAAK;MAAEiE,QAAQ,EAAE;IAAE,CAAC,CAAC,CAACtC,IAAI,CAACoC,MAAM,IAAI;MAC7D,MAAMG,QAAQ,GAAGH,MAAM,CAACA,MAAM,CAAC,CAAC,CAAC,CAACI,GAAG,CAACC,QAAQ;MAC9ChD,eAAe,CAAC8C,QAAQ,CAAC;IAC7B,CAAC,CAAC;EAEN,CAAC;;EAEG;EACA,eAAeG,QAAQ,GAAG;IAEtB,MAAMpC,IAAI,GAAG;MACTI,IAAI,EAAE5B,WAAW;MACjB6B,KAAK,EAAE3B;IACX,CAAC;IAED,MAAM0C,QAAQ,GAAG,MAAMiB,KAAK,CAAC,+BAA+B,EAAE;MAC1DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC1C,IAAI;IAC7B,CAAC,CAAC;IAGF,MAAMS,MAAM,GAAG,MAAMW,QAAQ,CAACuB,IAAI,EAAE;;IAEpC;IACA,MAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC;IACnD,OAAOF,SAAS,CAACG,UAAU,EAAE;MACzBH,SAAS,CAACI,WAAW,CAACJ,SAAS,CAACG,UAAU,CAAC;IAC/C;;IAEA;IACA,MAAME,KAAK,GAAGJ,QAAQ,CAACK,aAAa,CAAC,OAAO,CAAC;IAC7CN,SAAS,CAACO,WAAW,CAACF,KAAK,CAAC;;IAE5B;IACA,MAAMG,SAAS,GAAGP,QAAQ,CAACK,aAAa,CAAC,IAAI,CAAC;IAC9CD,KAAK,CAACE,WAAW,CAACC,SAAS,CAAC;IAC5B,MAAMC,IAAI,GAAG9C,MAAM,CAAC8C,IAAI,CAAC5C,MAAM,CAAC;IAChC,MAAM6C,UAAU,GAAG/C,MAAM,CAAC8C,IAAI,CAAC5C,MAAM,CAAC4C,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/CC,UAAU,CAACC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;IACxBD,UAAU,CAACE,OAAO,CAACC,SAAS,IAAI;MAC5B,MAAMC,UAAU,GAAGb,QAAQ,CAACK,aAAa,CAAC,IAAI,CAAC;MAC/CQ,UAAU,CAACC,WAAW,GAAGF,SAAS;MAClCL,SAAS,CAACD,WAAW,CAACO,UAAU,CAAC;IACrC,CAAC,CAAC;;IAEF;IACAL,IAAI,CAACG,OAAO,CAAClD,GAAG,IAAI;MAChB,MAAMsD,OAAO,GAAGf,QAAQ,CAACK,aAAa,CAAC,IAAI,CAAC;MAC5CD,KAAK,CAACE,WAAW,CAACS,OAAO,CAAC;MAC1B,MAAMC,OAAO,GAAGpD,MAAM,CAACH,GAAG,CAAC;MAC3B,MAAMwD,UAAU,GAAGvD,MAAM,CAACwD,MAAM,CAACF,OAAO,CAAC;MACzCC,UAAU,CAACP,OAAO,CAACjD,GAAG,CAAC,CAAC,CAAC;MACzBwD,UAAU,CAACN,OAAO,CAACQ,SAAS,IAAI;QAC5B,MAAMC,QAAQ,GAAGpB,QAAQ,CAACK,aAAa,CAAC,IAAI,CAAC;QAC7Ce,QAAQ,CAACN,WAAW,GAAGK,SAAS;QAChCJ,OAAO,CAACT,WAAW,CAACc,QAAQ,CAAC;MACjC,CAAC,CAAC;IACN,CAAC,CAAC;EACN;;EAEF;EACF;EACAxG,SAAS,CAAC,MAAM;IACZgC,aAAa,EAAE;IACfD,WAAW,EAAE;IACbuB,gBAAgB,EAAE;IAClBa,SAAS,EAAE;IACXQ,QAAQ,EAAE;EAGd,CAAC,EAAE,CAAC5D,WAAW,EAAEI,oBAAoB,EAAEE,oBAAoB,EAAEJ,YAAY,EAAEM,aAAa,EAAEE,YAAY,CAAC,CAAC;EAGxG,oBACA;IAAA,wBACI;MAAS,EAAE,EAAC,OAAO;MAAA,wBACnB;QAAA,UAAI;MAAK;QAAA;QAAA;QAAA;MAAA,QAAK,eACd;QAAA,UAAG;MAA4B;QAAA;QAAA;QAAA;MAAA,QAAI;IAAA;MAAA;MAAA;MAAA;IAAA,QAC7B,eAEV;MAAS,EAAE,EAAC,aAAa;MAAA,wBACrB;QAAA,UAAI;MAAY;QAAA;QAAA;QAAA;MAAA,QAAK,eACrB;QAAA,UAAG;MAA6B;QAAA;QAAA;QAAA;MAAA,QAAI,eAEpC;QAAK,SAAS,EAAC,QAAQ;QAAC,EAAE,EAAC,aAAa;QAAA,uBACpC;UAAA,WAAK,uBAED;YAAK,EAAE,EAAC;UAAK;YAAA;YAAA;YAAA;UAAA,QAAQ;QAAA;UAAA;UAAA;UAAA;QAAA;MACnB;QAAA;QAAA;QAAA;MAAA,QACJ,eAEN;QAAA,UAAG;MAA0C;QAAA;QAAA;QAAA;MAAA,QAAI,eAEjD;QACA,QAAQ,EAAIG,KAAK,IAAKZ,cAAc,CAACY,KAAK,CAACC,MAAM,CAACC,KAAK,CAAG;QAAA,wBAE1D;UAAA,UAAQ;QAAI;UAAA;UAAA;UAAA;QAAA,QAAS,EACpBjB,OAAO,CAACwB,GAAG,CAAEoE,GAAG,iBACb;UACI,SAAS,EAAC,MAAM;UAAA,UAGXA,GAAG,CAAC9D;QAAI,GAFN8D,GAAG,CAACjE,EAAE;UAAA;UAAA;UAAA;QAAA,QAIpB,CAAC;MAAA;QAAA;QAAA;QAAA;MAAA,QACO,eACT;QAAA;QAAA;QAAA;MAAA,QAAK,eACL;QAAA;QAAA;QAAA;MAAA,QAAK,eAGL;QAAA,WAAK,wBACD;UAAA,WAAG,QAAM,EAACzB,WAAW,GAAG,KAAK,GAAEE,YAAY,EAAC,GAAC;QAAA;UAAA;UAAA;UAAA;QAAA,QAAI,eACjD;UAAA,WAAG,gBAAc,EAACM,aAAa;QAAA;UAAA;UAAA;UAAA;QAAA,QAAK,eACpC;UAAA,uBACI;YAAK,KAAK,EAAER,WAAW,IAAG,EAAE,GAAE,CAAC,CAAC,GAAE;cAAE2F,SAAS,EAAE,OAAO;cAAEC,KAAK,EAAE,OAAO;cAAEC,MAAM,EAAE;YAAM,CAAE;YAAC,GAAG,EAAInF;UAAa;YAAA;YAAA;YAAA;UAAA;QAAO;UAAA;UAAA;UAAA;QAAA,QACpH;MAAA;QAAA;QAAA;QAAA;MAAA,QACF,eAEN;QAAA;QAAA;QAAA;MAAA,QAAK,eAGJ;QAAA,uBACG;UAAK,EAAE,EAAC;QAAQ;UAAA;UAAA;UAAA;QAAA;MAAO;QAAA;QAAA;QAAA;MAAA,QACrB,eAEN;QAAA;QAAA;QAAA;MAAA,QAAK;IAAA;MAAA;MAAA;MAAA;IAAA,QAEC;EAAA,gBACT;AAEL,CAAC;AAAA,GAzPKb,IAAI;AAAA,KAAJA,IAAI;AA2PV,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}