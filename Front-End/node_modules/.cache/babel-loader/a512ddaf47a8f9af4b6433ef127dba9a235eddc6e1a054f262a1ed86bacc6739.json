{"ast":null,"code":"var _jsxFileName = \"/Users/ryanclark/Desktop/climatecomparer/Front-End/src/pages/Add.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport { firestore } from '../components/Firebase';\nimport { addDoc, collection } from '@firebase/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Add = () => {\n  _s();\n  //React code to update DB *******************\n  const [reactCity, setCity] = useState('');\n  const [reactState, setState] = useState('');\n  const [reactResult, setResult] = useState(''); //includes all climate data \n  const [koppenClimate, setkoppenClimate] = useState('');\n  const history = useNavigate();\n  const addClimate = async (reactCity, reactState, reactResult) => {\n    const ref = collection(firestore, \"cityClimate\");\n    let data = {\n      city: reactCity,\n      state: reactState,\n      result: reactResult\n    };\n    console.log(data.city, data.state);\n    if (!data.city == '' && !data.state == '' && !data.result == '') {\n      await addDoc(ref, data).then(() => {\n        alert(\"Data Successfully Submitted\");\n      }).catch(error => {\n        alert(error(\"Error adding document: \", error));\n      });\n    }\n    const getKoppenClimate = async () => {\n      //grab lat and lon\n      let city = reactCity;\n      let state = '';\n      let country = reactState;\n      if (currentCity == '') {\n        return;\n      }\n      if (statesUSA.includes(currentState)) {\n        state = currentState;\n        country = 'us';\n      }\n\n      // console.log(currentCity, currentState)\n\n      const baseURL1 = `https://api.openweathermap.org/geo/1.0/direct?q=${city},${state},${country}&limit=2&appid=3dd6b4b0643fe807a69521e6f5cd399a`;\n      await axios.get(baseURL1).then(async response => {\n        // console.log(response)\n        const lat = response.data[0].lat;\n        const lon = response.data[0].lon;\n        const first_res = response;\n        // console.log('lat: ', lat,'lon: ', lon)\n\n        // get koppen climate type\n        const baseURL2 = `http://climateapi.scottpinkelman.com/api/v1/location/${lat}/${lon}`;\n        axios.get(baseURL2).then(async response => {\n          // console.log(\"2nd response\", response)\n          const koppen = response.data.return_values[0].zone_description;\n          setkoppenClimate(koppen);\n          console.log(koppen);\n        });\n      });\n    };\n  };\n  useEffect(() => {\n    addClimate(reactCity, reactState, reactResult);\n    getKoppenClimate();\n  }, [reactCity, reactState, reactResult]);\n\n  //UI for Microservice to fetch city Climate data constructed by partner in JS *********** \n  async function sendData() {\n    const city = document.getElementById(\"city\").value;\n    const state = document.getElementById(\"state\").value;\n    const data = {\n      city: city,\n      state: state\n    };\n    const response = await fetch(\"http://localhost:3001/weather\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    const result = await response.json();\n    setState(state);\n    setCity(city);\n    setResult(result);\n\n    // Clear any existing table\n    const resultDiv = document.getElementById(\"result\");\n    while (resultDiv.firstChild) {\n      resultDiv.removeChild(resultDiv.firstChild);\n    }\n\n    // Create a new table element\n    const table = document.createElement(\"table\");\n    resultDiv.appendChild(table);\n\n    // Create the header row\n    const headerRow = document.createElement(\"tr\");\n    table.appendChild(headerRow);\n    const keys = Object.keys(result);\n    const monthNames = Object.keys(result[keys[0]]);\n    monthNames.unshift(\"\"); // Add an empty cell for the first column\n    monthNames.forEach(monthName => {\n      const headerCell = document.createElement(\"th\");\n      headerCell.textContent = monthName;\n      headerRow.appendChild(headerCell);\n    });\n\n    // Create the data rows\n    keys.forEach(key => {\n      const dataRow = document.createElement(\"tr\");\n      table.appendChild(dataRow);\n      const rowData = result[key];\n      const dataValues = Object.values(rowData);\n      dataValues.unshift(key); // Add the month name to the first column\n      dataValues.forEach(dataValue => {\n        const dataCell = document.createElement(\"td\");\n        dataCell.textContent = dataValue;\n        dataRow.appendChild(dataCell);\n      });\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"city\",\n      placeholder: \"Enter city\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"state\",\n      placeholder: \"Enter state(US)/Country\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendData,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"result\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 9\n  }, this);\n};\n_s(Add, \"YlYAvKy9M0iULNIhB4jMbWSoq5g=\", false, function () {\n  return [useNavigate];\n});\n_c = Add;\nexport default Add;\n\n// Styling\nconst container = {\n  width: 500,\n  margin: '50px auto'\n};\nvar _c;\n$RefreshReg$(_c, \"Add\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","firestore","addDoc","collection","Add","reactCity","setCity","reactState","setState","reactResult","setResult","koppenClimate","setkoppenClimate","history","addClimate","ref","data","city","state","result","console","log","then","alert","catch","error","getKoppenClimate","country","currentCity","statesUSA","includes","currentState","baseURL1","axios","get","response","lat","lon","first_res","baseURL2","koppen","return_values","zone_description","sendData","document","getElementById","value","fetch","method","headers","body","JSON","stringify","json","resultDiv","firstChild","removeChild","table","createElement","appendChild","headerRow","keys","Object","monthNames","unshift","forEach","monthName","headerCell","textContent","key","dataRow","rowData","dataValues","values","dataValue","dataCell","container","width","margin"],"sources":["/Users/ryanclark/Desktop/climatecomparer/Front-End/src/pages/Add.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport { firestore } from '../components/Firebase';\nimport { addDoc, collection } from '@firebase/firestore';\n\n\n\nconst Add = () => {\n    //React code to update DB *******************\n    const [reactCity, setCity]        = useState('');\n    const [reactState, setState]      = useState('');\n    const [reactResult, setResult]    = useState(''); //includes all climate data \n    const [koppenClimate, setkoppenClimate] = useState('')\n\n    const history = useNavigate();\n\n\n    const addClimate = async (reactCity, reactState, reactResult) => {\n        const ref = collection(firestore, \"cityClimate\")\n\n        let data = {\n            city: reactCity,\n            state: reactState,\n            result: reactResult\n        }\n        console.log(data.city, data.state)\n\n        if (!data.city == '' && !data.state == '' && !data.result == '') {\n\n            await addDoc(ref, data)\n            .then(() => {\n                alert(\"Data Successfully Submitted\");\n            })\n            .catch((error) => {\n                alert(error(\"Error adding document: \", error));\n            });    \n        }\n        const getKoppenClimate = async () => {\n            //grab lat and lon\n                let city = reactCity\n                let state = ''\n                let country = reactState\n    \n                if (currentCity == ''){\n                    return\n                }\n                if (statesUSA.includes(currentState)){\n                    state = currentState\n                    country = 'us'\n                }\n    \n                // console.log(currentCity, currentState)\n    \n                const baseURL1 = `https://api.openweathermap.org/geo/1.0/direct?q=${city},${state},${country}&limit=2&appid=3dd6b4b0643fe807a69521e6f5cd399a`\n                \n                await axios.get(baseURL1).then(async(response)=> {\n                    // console.log(response)\n                    const lat =  response.data[0].lat\n                    const lon = response.data[0].lon\n                    const first_res = response\n                    // console.log('lat: ', lat,'lon: ', lon)\n    \n    \n                // get koppen climate type\n                const baseURL2 = `http://climateapi.scottpinkelman.com/api/v1/location/${lat}/${lon}`\n                axios.get(baseURL2).then(async(response)=> {\n                    // console.log(\"2nd response\", response)\n                    const koppen = response.data.return_values[0].zone_description\n                    setkoppenClimate(koppen)\n                    console.log(koppen)\n                    });\n    \n                })\n        }\n       \n    };\n    useEffect(() => {\n        addClimate(reactCity, reactState, reactResult)\n        getKoppenClimate()\n\n    }, [reactCity, reactState, reactResult])\n\n    //UI for Microservice to fetch city Climate data constructed by partner in JS *********** \n    async function sendData() {\n        const city = document.getElementById(\"city\").value;\n        const state = document.getElementById(\"state\").value;\n\n        const data = {\n            city: city,\n            state: state\n        };\n       \n        const response = await fetch(\"http://localhost:3001/weather\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        });\n       \n\n        const result = await response.json();\n        setState(state)\n        setCity(city)\n        setResult(result)\n\n        // Clear any existing table\n        const resultDiv = document.getElementById(\"result\");\n        while (resultDiv.firstChild) {\n            resultDiv.removeChild(resultDiv.firstChild);\n        }\n\n        // Create a new table element\n        const table = document.createElement(\"table\");\n        resultDiv.appendChild(table);\n\n        // Create the header row\n        const headerRow = document.createElement(\"tr\");\n        table.appendChild(headerRow);\n        const keys = Object.keys(result);\n        const monthNames = Object.keys(result[keys[0]]);\n        monthNames.unshift(\"\"); // Add an empty cell for the first column\n        monthNames.forEach(monthName => {\n            const headerCell = document.createElement(\"th\");\n            headerCell.textContent = monthName;\n            headerRow.appendChild(headerCell);\n        });\n\n        // Create the data rows\n        keys.forEach(key => {\n            const dataRow = document.createElement(\"tr\");\n            table.appendChild(dataRow);\n            const rowData = result[key];\n            const dataValues = Object.values(rowData);\n            dataValues.unshift(key); // Add the month name to the first column\n            dataValues.forEach(dataValue => {\n                const dataCell = document.createElement(\"td\");\n                dataCell.textContent = dataValue;\n                dataRow.appendChild(dataCell);\n            });\n        });\n    }\n\n    return (\n   \n        <div>\n            <input type=\"text\" id=\"city\"  placeholder=\"Enter city\" required/>\n            <input type=\"text\" id=\"state\" placeholder=\"Enter state(US)/Country\" required/>\n            <button onClick={sendData}>Submit</button>\n            <div id=\"result\"></div>\n        </div>\n      );\n    };\n\n   \nexport default Add;\n\n// Styling\nconst container = {\n    width: 500,\n    margin: '50px auto'\n  }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}